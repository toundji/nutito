import type { ConnectionOptions as TypeORMConnectionOptions } from 'typeorm';
import type { LazyAttribute } from './lazyAttribute';
import type { Subfactory } from './subfactory';
export declare type ConnectionOptions = TypeORMConnectionOptions & {
    seeders: string[];
    defaultSeeder: string;
};
export declare type ConnectionConfiguration = {
    root?: string;
    configName?: string;
    connection: string;
};
export declare type Constructable<T> = new () => T;
export declare type FactorizedAttr<V> = V | (() => V | Promise<V>) | Subfactory<V extends Array<infer U> ? U : V>;
export declare type FactorizedAttrs<T> = {
    [K in keyof Partial<T>]: FactorizedAttr<T[K]> | LazyAttribute<T, FactorizedAttr<T[K]>>;
};
export declare type LazyAttributeCallback<T, V> = (entity: T) => V;
